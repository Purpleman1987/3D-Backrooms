<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Multiplayer Backrooms</title>
  <style>
    #chatBox {
      border: 1px solid #ccc;
      width: 300px;
      height: 200px;
      overflow-y: scroll;
      margin-top: 10px;
      padding: 5px;
      background-color: #f9f9f9;
    }
    #chatInput {
      width: 200px;
    }
    #sendButton {
      width: 80px;
    }
  </style>
</head>
<body>
  <h1>Multiplayer Backrooms</h1>
  <div id="chatBox"></div>
  <input type="text" id="chatInput" placeholder="Type a message" />
  <button id="sendButton" onclick="sendMessage()">Send</button>

  <script src="/socket.io/socket.io.js"></script>
  <script src="client.js"></script>
</body>
</html>
const socket = io("http://localhost:3000");

const players = {}; // Track all players in the game

// Handle current players data
socket.on("currentPlayers", (serverPlayers) => {
  for (const id in serverPlayers) {
    if (id !== socket.id) {
      addPlayerToGame(id, serverPlayers[id]);
    }
  }
});

// Handle new player joining
socket.on("newPlayer", (player) => {
  addPlayerToGame(player.id, player);
});

// Handle player movement updates
socket.on("updatePlayer", (player) => {
  if (players[player.id]) {
    players[player.id].x = player.x;
    players[player.id].y = player.y;
    players[player.id].z = player.z;
    updatePlayerPosition(player.id);
  }
});

// Handle player disconnection
socket.on("removePlayer", (id) => {
  if (players[id]) {
    removePlayerFromGame(id);
  }
});

// Chat: Handle incoming messages
socket.on("chatMessage", (chatData) => {
  const chatBox = document.getElementById("chatBox");
  const message = document.createElement("div");
  message.textContent = `${chatData.playerName}: ${chatData.message}`;
  chatBox.appendChild(message);
});

// Function to add a player to the game
function addPlayerToGame(id, data) {
  players[id] = data;
  console.log(`Player ${id} added to the game`);
}

// Function to update a player's position
function updatePlayerPosition(id) {
  console.log(`Updating player ${id} position to`, players[id]);
}

// Function to remove a player from the game
function removePlayerFromGame(id) {
  console.log(`Player ${id} removed from the game`);
  delete players[id];
}

// Chat: Send message to the server
function sendMessage() {
  const chatInput = document.getElementById("chatInput");
  const message = chatInput.value.trim();
  if (message) {
    socket.emit("chatMessage", message);
    chatInput.value = ""; // Clear the input field
  }
const express = require("express");
const http = require("http");
const { Server } = require("socket.io");

const app = express();
const server = http.createServer(app);
const io = new Server(server);

const players = {}; // Store player data

io.on("connection", (socket) => {
  console.log("A player connected:", socket.id);

  // Add a new player to the game
  players[socket.id] = {
    x: 0, // Initial x position
    y: 0, // Initial y position
    z: 0  // Initial z position
  };

  // Send the current players to the new player
  socket.emit("currentPlayers", players);

  // Notify other players of the new player
  socket.broadcast.emit("newPlayer", { id: socket.id, ...players[socket.id] });

  // Handle player movement
  socket.on("playerMove", (data) => {
    if (players[socket.id]) {
      players[socket.id] = data; // Update player position
      socket.broadcast.emit("updatePlayer", { id: socket.id, ...data });
    }
  });

  // Handle player disconnection
  socket.on("disconnect", () => {
    console.log("A player disconnected:", socket.id);
    delete players[socket.id];
    io.emit("removePlayer", socket.id);
  });

  // Handle chat messages
  socket.on("chatMessage", (message) => {
    const playerName = `Player ${socket.id.substring(0, 4)}`; // Optional: Shorten ID for display
    const chatData = { playerName, message };
    console.log("Chat message received:", chatData);
    io.emit("chatMessage", chatData); // Broadcast chat to all players
  });
});

server.listen(3000, () => {
  console.log("Server is running on http://localhost:3000");
});
using UnityEngine;
using UnityEngine.AI;

public class BackroomsGame : MonoBehaviour
{
    public Transform player;
    public Transform monster;
    public NavMeshAgent monsterAgent;
    public GameObject[] walls;

    void Start()
    {
        // Initialize walls with collisions
        foreach (var wall in walls)
        {
            wall.AddComponent<BoxCollider>();
        }
    }

    void Update()
    {
        // Make the AI monster follow the player
        if (player != null && monsterAgent != null)
        {
            monsterAgent.SetDestination(player.position);
        }
    }
{
  "games": [
    {
      "id": "backrooms-3d-game",
      "name": "3D Backrooms Horror",
      "description": "Navigate the eerie backrooms while avoiding a relentless AI monster.",
      "developer": "Purpleman1987",
      "release_date": "2025-05-06",
      "key_id": "backrooms-key-12345",
      "metadata": {
        "genre": "Horror",
        "platforms": ["Windows", "Mac", "Web"],
        "rating": "T for Teen",
        "engine": "Unity 3D",
        "features": [
          "3D environment with solid walls",
          "AI monster that follows the player",
          "Immersive horror experience"
        ]
      }
    }
  ]
